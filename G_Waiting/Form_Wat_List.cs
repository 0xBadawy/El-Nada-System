using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Data.Entity;
using DevExpress.XtraReports;
using DevExpress.XtraGrid;
using DevExpress.XtraGrid.Views.Grid;
using DevExpress.XtraReports.UI;

using System.Data.SqlClient;

namespace FWD.G_Waiting
{
    public partial class Form_Wat_List : Form
    {
        DB_FWDEntities DataBase = new DB_FWDEntities();
        TB_WAT tb_wat = new TB_WAT();
        Form_WAT_Done form_WAT_Done = new Form_WAT_Done();

        public Form_Wat_List()
        {
            InitializeComponent();
            //    gridView1.CustomDrawCell += gridControl1_CustomDrawCell;

            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext


            // This line of code is generated by Data Source Configuration Wizard
         
            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            FWD.DB_FWDEntities dbContext = new FWD.DB_FWDEntities();
            // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
            dbContext.View_Wating_List_List.LoadAsync().ContinueWith(loadTask =>
            {
    // Bind data to control when loading complete
    gridControl1.DataSource = dbContext.View_Wating_List_List.Local.ToBindingList();
            }, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());
            gridView1.CustomDrawCell += gridControl1_CustomDrawCell;
        }

        private void btn_ref_Click(object sender, EventArgs e)
        {
            UpDate_Data();
            gridView1.CustomDrawCell += gridControl1_CustomDrawCell;



        }

        private void UpDate_Data(){
            DataBase = new DB_FWDEntities();
            gridControl1.DataSource = DataBase.View_Wating_List_List.ToList();
        }

        private void btn_del_Click(object sender, EventArgs e)
        {
            int id = Convert.ToInt32(gridView1.GetFocusedRowCellValue("ID"));
            var rs = MessageBox.Show("عملية حذف", "هل انت متاكد من عملية الحذف", MessageBoxButtons.YesNo);

            Toise.Toast_Done ToastDone = new Toise.Toast_Done();
            Toise.Toast_Waring ToastWaring = new Toise.Toast_Waring();
            Toast.Toast_Del ToastDel = new Toast.Toast_Del();


            try
            {
                if (rs == DialogResult.Yes)
                {
                    tb_wat = DataBase.TB_WAT.Where(x => x.ID == id).FirstOrDefault();
                    DataBase.Entry(tb_wat).State = EntityState.Deleted;
                    DataBase.SaveChanges();
                    UpDate_Data();

                    ToastDel.Show();
                }               
            }
            catch{
                ToastWaring.Lable_Text.Text = "لا يوجد شئ لحذفة";
                ToastWaring.Show();
                UpDate_Data();

            }
        }

        private void simpleButton1_Click(object sender, EventArgs e){
            //     Reports.Report_Wating_Detl Report = new Reports.Report_Wating_Detl();
            // Reports.XtraReport1 yy = new Reports.XtraReport1();
            //      int id = Convert.ToInt32(gridView1.GetFocusedRowCellValue("ID"));
            //      tb_wat = DataBase.TB_WAT.Where(x => x.ID == id).FirstOrDefault();
            //Report.DataSource = tb_wat;
            //   Report.ShowPreview();
            //       yy.ExportToXlsx(Text);
            //   yy.ShowPreview();

            gridControl1.ShowPrintPreview();

        }

        private void barButtonItem1_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            gridControl1.ShowPrintPreview();
        }

        private void simpleButton2_Click(object sender, EventArgs e)
        {
            Form_WAT_Done form_WAT_Done = new Form_WAT_Done();

            int id = Convert.ToInt32(gridView1.GetFocusedRowCellValue("ID"));
            form_WAT_Done.Done_id = id;
            form_WAT_Done.Show();
        }


        private void gridControl1_CustomDrawCell(object sender, DevExpress.XtraGrid.Views.Base.RowCellCustomDrawEventArgs e)
        {
            try
            {

            if (e.Column.FieldName == "WAT_Done_state"){
                string cellValue = e.CellValue.ToString();
                if (cellValue == "في قائمة الانتظار")
                {
                    e.Appearance.BackColor = Color.OrangeRed;
                    e.Appearance.ForeColor = Color.White;
                }
                else if (cellValue == "جارٍ التنفيذ"){
                    e.Appearance.BackColor = Color.DodgerBlue;
                    e.Appearance.ForeColor = Color.White;
                }
                else if (cellValue == "تم التفيذ"){
                    e.Appearance.BackColor = Color.YellowGreen;
                    e.Appearance.ForeColor = Color.White;
                }
            }

            }
            catch
            {

            }
        }

        private void gridControl1_Click(object sender, EventArgs e)
        {

        }
    }
}
