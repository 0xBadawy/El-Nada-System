using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Data.Entity;

namespace FWD.G_Customers
{
    public partial class Form_Cus_Needs : Form
    {
        DB_FWDEntities DataBase = new DB_FWDEntities();

        public Form_Cus_Needs()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            FWD.DB_FWDEntities dbContext = new FWD.DB_FWDEntities();
            // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
            dbContext.View_CUST_Need.LoadAsync().ContinueWith(loadTask =>
            {
                // Bind data to control when loading complete
                gridControl1.DataSource = dbContext.View_CUST_Need.Local.ToBindingList();
            }, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());



            //     this.tB_Family_Needs_TypeTableAdapter.Fill(this.dB_FWDDataSet2097.TB_Family_Needs_Type);
            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            FWD.DB_FWDEntities dbContext5 = new FWD.DB_FWDEntities();
            // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
            dbContext5.TB_Family_Needs_Type.LoadAsync().ContinueWith(loadTask =>
            {
                // Bind data to control when loading complete
                edit_need_type.Properties.DataSource = dbContext5.TB_Family_Needs_Type.Local.ToBindingList();
            }, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());


            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            FWD.DB_FWDEntities dbContextoo = new FWD.DB_FWDEntities();
            // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
            dbContextoo.TB_Family_Needs_Type.LoadAsync().ContinueWith(loadTask =>
            {
    // Bind data to control when loading complete
    edit_need_type.Properties.DataSource = dbContextoo.TB_Family_Needs_Type.Local.ToBindingList();
            }, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());
        }

        private void groupBox1_Enter(object sender, EventArgs e)
        {

        }

        private void panel_Form_Cus_Incom_Paint(object sender, PaintEventArgs e)
        {

        }

        private void comboBoxEdit1_Click(object sender, EventArgs e)
        {

        }

        private void Form_Cus_Needs_Load(object sender, EventArgs e)
        {
            // TODO: This line of code loads data into the 'dB_FWDDataSet2097.TB_Family_Needs_Type' table. You can move, or remove it, as needed.
      //      this.tB_Family_Needs_TypeTableAdapter.Fill(this.dB_FWDDataSet2097.TB_Family_Needs_Type);

        }

        private void lookUpEdit1_Click(object sender, EventArgs e)
        {
       //     this.tB_Family_Needs_TypeTableAdapter.Fill(this.dB_FWDDataSet2097.TB_Family_Needs_Type);

        }

        private void simpleButton1_Click(object sender, EventArgs e)
        {

            TB_CUST_Need tb_cust_need = new TB_CUST_Need();

            int id = Convert.ToInt32(gridView1.GetFocusedRowCellValue("CUST_Need_ID"));
            var rs = MessageBox.Show("عملية حذف", "هل انت متاكد من عملية الحذف", MessageBoxButtons.YesNo);

            Toise.Toast_Done ToastDone = new Toise.Toast_Done();
            Toise.Toast_Waring ToastWaring = new Toise.Toast_Waring();


            try
            {
                if (rs == DialogResult.Yes)
                {
                    tb_cust_need = DataBase.TB_CUST_Need.Where(x => x.CUST_Need_ID == id).FirstOrDefault();
                    DataBase.Entry(tb_cust_need).State = EntityState.Deleted;
                    DataBase.SaveChanges();
                    UpDate_Data();
                    ToastDone.Show();
                }
            }
            catch
            {
                ToastWaring.Lable_Text.Text = "لا يوجد شئ لحذفة";
                ToastWaring.Show();
            }
        }

        private void UpDate_Data()
        {
            DataBase = new DB_FWDEntities();
            gridControl1.DataSource = DataBase.View_CUST_Need.Where(x=>x.CUST_Need_FK== Class_main.myGlobalVariable).ToList();
        }

        private void Button_add_Click(object sender, EventArgs e)
        {
            TB_CUST_Need tb_cust_need = new TB_CUST_Need();

            Toise.Toast_Done ToastDone = new Toise.Toast_Done();
            Toise.Toast_Waring ToastWaring = new Toise.Toast_Waring();


            try
            {
                tb_cust_need.CUST_Need_Type = Convert.ToInt32(edit_need_type.EditValue);
                tb_cust_need.CUST_Need_type_det = edit_need_det.Text;


                tb_cust_need.CUST_Need_FK = Class_main.myGlobalVariable;

                DataBase.TB_CUST_Need.Add(tb_cust_need);
                DataBase.SaveChanges();


                ToastDone.Lable_Text.Text = "تم تسجيل هذا المتطلب";
                ToastDone.Show();
                UpDate_Data();

            }
            catch
            {
                ToastWaring.Lable_Text.Text = "حدث خطا فى الحفظ";
                ToastWaring.Show();
            }



        }

        private void simpleButton2_Click(object sender, EventArgs e)
        {
            UpDate_Data();

        }
    }
}
