using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Data.Entity;

namespace FWD.G_Customers
{
    public partial class Form_Cus_Owns : Form
    {
        DB_FWDEntities DataBase = new DB_FWDEntities();
        public Form_Cus_Owns()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            FWD.DB_FWDEntities dbContext = new FWD.DB_FWDEntities();
            // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
            dbContext.TB_CUST_Property.LoadAsync().ContinueWith(loadTask =>
            {
                // Bind data to control when loading complete
                gridControl1.DataSource = dbContext.TB_CUST_Property.Local.ToBindingList();
            }, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());
            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            FWD.DB_FWDEntities dbContext2 = new FWD.DB_FWDEntities();
            // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
            dbContext2.TB_Family_Owns_Type.LoadAsync().ContinueWith(loadTask =>
            {
                // Bind data to control when loading complete
                edit_owns_Type.Properties.DataSource = dbContext2.TB_Family_Owns_Type.Local.ToBindingList();
            }, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());
            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            FWD.DB_FWDEntities dbContext6 = new FWD.DB_FWDEntities();
            // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
            dbContext6.View_CUST_Propert.LoadAsync().ContinueWith(loadTask =>
            {
    // Bind data to control when loading complete
    gridControl1.DataSource = dbContext6.View_CUST_Propert.Local.ToBindingList();
            }, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());
        }

        private void label2_Click(object sender, EventArgs e)
        {

        }

        private void Button_Add_Click(object sender, EventArgs e)
        {

            TB_CUST_Property tb_cus_property = new TB_CUST_Property();

            Toise.Toast_Done ToastDone = new Toise.Toast_Done();
            Toise.Toast_Waring ToastWaring = new Toise.Toast_Waring();
            try{

                tb_cus_property.CUST_Property_Det = edit_owns_det.Text;
                tb_cus_property.CUST_Property_Name = Convert.ToInt32(edit_owns_Type.EditValue);
                tb_cus_property.CUST_Property_value = Convert.ToDouble(edit_owns_val.Text);
                tb_cus_property.CUST_Property_PK = Class_main.myGlobalVariable;
                DataBase.TB_CUST_Property.Add(tb_cus_property);
                DataBase.SaveChanges();

                ToastDone.Lable_Text.Text = "تم تسجيل الممتلكات";
                ToastDone.Show();
                UpDate_Data();

            }
            catch
            {
                ToastWaring.Lable_Text.Text = "حدث خطا فى الحفظ";
                ToastWaring.Show();
            }

        }

        private void groupBox1_Enter(object sender, EventArgs e)
        {

        }

        private void panel_Form_Cus_Owns_Paint(object sender, PaintEventArgs e)
        {

        }

        private void Form_Cus_Owns_Load(object sender, EventArgs e)
        {
            // TODO: This line of code loads data into the 'dB_FWDDataSet2098.TB_Family_Owns_Type' table. You can move, or remove it, as needed.
          //  this.tB_Family_Owns_TypeTableAdapter.Fill(this.dB_FWDDataSet2098.TB_Family_Owns_Type);

        }

        private void lookUpEdit1_Click(object sender, EventArgs e)
        {
            this.tB_Family_Owns_TypeTableAdapter.Fill(this.dB_FWDDataSet2098.TB_Family_Owns_Type);

        }

        private void simpleButton1_Click(object sender, EventArgs e)
        {
            TB_CUST_Property tb_cus_property = new TB_CUST_Property();

            int id = Convert.ToInt32(gridView1.GetFocusedRowCellValue("CUST_Property_ID"));
            var rs = MessageBox.Show("عملية حذف", "هل انت متاكد من عملية الحذف", MessageBoxButtons.YesNo);

            Toise.Toast_Done ToastDone = new Toise.Toast_Done();
            Toise.Toast_Waring ToastWaring = new Toise.Toast_Waring();


            try
            {
                if (rs == DialogResult.Yes)
                {
                    tb_cus_property = DataBase.TB_CUST_Property.Where(x => x.CUST_Property_ID == id).FirstOrDefault();
                    DataBase.Entry(tb_cus_property).State = EntityState.Deleted;
                    DataBase.SaveChanges();
                    UpDate_Data();
                    ToastDone.Show();
                }
            }
            catch
            {
                ToastWaring.Lable_Text.Text = "لا يوجد شئ لحذفة";
                ToastWaring.Show();
            }
        }

        private void UpDate_Data()
        {
            DataBase = new DB_FWDEntities();
            gridControl1.DataSource = DataBase.View_CUST_Propert.Where(x=>x.CUST_Property_PK==Class_main.myGlobalVariable).ToList();
        }

        private void simpleButton2_Click(object sender, EventArgs e)
        {
            UpDate_Data();
        }

        private void edit_owns_Type_EditValueChanged(object sender, EventArgs e)
        {

        }
    }
}
